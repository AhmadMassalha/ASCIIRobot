main:-------------
import random
import pygame
import anims
import datastructs
import threading
import time
from pygame import mixer

clock = pygame.time.Clock()
WIDTH, HEIGHT = 600, 600
FONTSIZE = 12
SECONDFONTSIZE = 15
PLAYERLENGTH = FONTSIZE+3
pygame.display.set_caption("Game")
screen = pygame.display.set_mode((WIDTH,HEIGHT))

pygame.init()
#FONT------------------------------------------
font = pygame.font.SysFont("Consolas", FONTSIZE)
second_font = pygame.font.SysFont("Consolas", SECONDFONTSIZE)
player_text = font.render('', True,"white")
dialogue_text = font.render('', True,"white")
player_color = (255,255,255)
def render_multi_line(text, x, y, fsize):
    lines = text.splitlines()
    global player_text
    for i, l in enumerate(lines):
        #screen.blit(font.render(l, 0, "white"), (x, y + fsize * i))
        player_text = font.render(l, 0, player_color)
        screen.blit(player_text, (x, y + fsize * i))

####################################-------------
#-------------------TYPE WRITER-----------------#
# type writer is going to be using a dialogue queue
# methods that want stuff to be written on the screen
# add their texts to the type writing que.
#


dialogue_delay = 150
screen_typing_q = datastructs.queue()
finished_current = True    # to indicate wether current text is finished writing
finished_delay = True      # to indicate wether current text is finished delaying
current_playing_text = ''

def dialogueManager():
    global current_playing_text
    global screen_typing_q
    global finished_delay
    global finished_current
    global current_dialougue_num
    global current_dialogue  # the one that's displayed on screen
    dialogueTypewrite(current_playing_text)
    if screen_typing_q.isempty():   # nothing to do return
        if finished_delay is True and finished_current is True:
            current_playing_text = ""
        return
    if finished_current and finished_delay:     # if nothing finished delays and last, then pop new
        current_playing_text = screen_typing_q.pop_from_q()
        current_dialougue_num = 0
        current_dialogue = ""
        print(current_playing_text)
        if current_playing_text is not None:
            finished_current, finished_delay = False, False


def addDialogue(text):
    global screen_typing_q
    screen_typing_q.add_to_q(text)


current_dialogue = ""
current_dialougue_num = 0


#the main problem is in the modolo operator, at some times the time ticks
#are just in time to be divisable by 300 without remainder and this makes the
#delay way shorter than needed.

#fixing idea: when the delay starts same the start tick then do
#if {current tick} - {start tick} > delay , this should be way more accurate
#but i'll have to figure out a way to update the start tick only one
# (tried though it only work on first one)

def delayDialogue(delay):
    global finished_delay
    if pygame.time.get_ticks() % delay == 0:
        finished_delay = True

def dialogueTypewrite(text):
    global dialogue_text
    global current_dialogue
    global current_dialougue_num
    global finished_current
    global finished_delay
    if len(text) == 0:
        return
    #for determining when dialouge part ends, and also delaying
    if len(text) == len(current_dialogue):
        if finished_current is False:
            finished_current = True
        if finished_delay is True:
            finished_delay = False
        delayDialogue(dialogue_delay)

    dX,dY = 50,550
    dialogue_cooldown = 2
    if pygame.time.get_ticks() % dialogue_cooldown == 0:
        if current_dialougue_num < len(text):
            current_dialogue = current_dialogue + text[current_dialougue_num]
            dialogue_text = second_font.render(current_dialogue, 0, "yellow")
            current_dialougue_num += 1
    screen.blit(dialogue_text, (dX, dY))


#----------------------------------------------
####################################################-------------
####################################################-------------
#-------------PLAYER------------------------#

normal_color = 'white'
crazyColor = False
player_pos_x = 200
player_pos_y = 200

#for collisions and more
real_player_pos_x = 200
real_player_pos_y = 200
#-----------------------
move_cooldown = 1
strech_cooldown = 1
color_cooldown = 8

#----Speed------
movement_speed = 5
strech_speed = 3
#-----------------
max_strech = PLAYERLENGTH * 3
def player_move(key):
    global player_pos_x
    global player_pos_y
    global real_player_pos_x
    global real_player_pos_y
    if pygame.time.get_ticks() % move_cooldown == 0:
        if key == pygame.K_RIGHT:
            player_pos_x += movement_speed
        if key == pygame.K_LEFT:
            player_pos_x -= movement_speed
        if key == pygame.K_UP:
            player_pos_y -= movement_speed
        if key == pygame.K_DOWN:
            player_pos_y += movement_speed
    real_player_pos_x = player_pos_x
    real_player_pos_y = player_pos_y

def playerStrech(key):
    global player_pos_y
    global PLAYERLENGTH
    global crazyColor
    if PLAYERLENGTH > max_strech:
        PLAYERLENGTH -= strech_speed
        player_pos_y += strech_speed*4
        return
    if PLAYERLENGTH < -max_strech:
        PLAYERLENGTH += strech_speed
        player_pos_y -= strech_speed*4
        return
    if abs(PLAYERLENGTH) > max_strech*0.75:
        crazyColor = True
    else:
        crazyColor = False
    if pygame.time.get_ticks() % strech_cooldown == 0:
        if key == pygame.K_w:
            player_pos_y -= strech_speed*4
            PLAYERLENGTH += strech_speed
        if key == pygame.K_s:
            player_pos_y += strech_speed*4
            PLAYERLENGTH -= strech_speed


#######################################---------------------
#######   PLAYER WALK ANIMATION   ##########-----------------

strToRenderWalk = anims.player_walk[0]
last_player_walk = 0
j = 0
def player_idle():
    global strToRenderWalk
    strToRenderWalk = anims.player_walk[0]
def player_walk_anim():
    global last_player_walk
    global j
    global strToRenderWalk
    # print(j)
    now = pygame.time.get_ticks()
    cooldown = 50
    if now - last_player_walk > cooldown:
        if j >= 5:
            j = 0
        j += 1
        strToRenderWalk = anims.player_walk[j]
        last_player_walk = now
def playerColor(spec):
    global player_color
    if pygame.time.get_ticks() % color_cooldown == 0:
        if spec is None:
            player_color = (random.randrange(50,250),random.randrange(50,250),random.randrange(50,250))
        else:
            player_color = spec

############################################--------------------
######### KEYS #############################--------------------

def keysAction():
    pressed = pygame.key.get_pressed()
    ###PRESSED:
    ##MOVEMENT-------
    if pressed[pygame.K_RIGHT]:
        player_walk_anim()      # the movement animation
        player_move(pygame.K_RIGHT)     # the general movement method
    if pressed[pygame.K_LEFT]:
        player_walk_anim()
        player_move(pygame.K_LEFT)
    if pressed[pygame.K_UP]:
        player_walk_anim()
        player_move(pygame.K_UP)
    if pressed[pygame.K_DOWN]:
        player_walk_anim()
        player_move(pygame.K_DOWN)
    #STRECHING
    if pressed[pygame.K_w]:
        playerStrech(pygame.K_w)
    if pressed[pygame.K_s]:
        playerStrech(pygame.K_s)
    #-------------------------
    ##EVENTS:
    for event in pygame.event.get():
        #QUIT
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()
        #KEY UP----------------------------
        if event.type == pygame.KEYDOWN:
            #Escape
            if event.key == pygame.K_ESCAPE:
                pygame.quit()
                exit()
            if event.key == pygame.K_SPACE:
                addDialogue("Hello every one, my name is robot man 2")
                addDialogue("And this queue works greatly")
                addDialogue("Which is very nice, because now we can have dialogues")

            # ----MOVEMENT----
        #KEY DOWN---------------------------
        if event.type == pygame.KEYUP:
            #----MOVEMENT----
            #1.Right
            if event.key == pygame.K_RIGHT or pygame.K_LEFT:
                player_idle()

#MUSIC-----------------------------------------
mixer.music.load('./sounds/music/Elctro Heaven.mp3')
mixer.music.set_volume(0.001)
mixer.music.play(-1)
################################################---------------
###################################----------------------------

def printeverysec(text):
    for i in range(len(text)):
        print(text[i])
        time.sleep(4)

x = threading.Thread(target=printeverysec, args=('hello worlddd',))
x.start()

if __name__ == '__main__':
    while True:
        screen.fill((23, 28, 59))
        #things that update-------------------
        keysAction()
       # print(pygame.time.get_ticks())
        #player:---------------------------------
        if crazyColor:
            playerColor(None)
        else:
            playerColor(normal_color)
        render_multi_line(strToRenderWalk, player_pos_x, player_pos_y, PLAYERLENGTH)
        # dialogueTypewrite("Hello every one, my name is robot man 2")
        #----------------------------------------
        # pygame.display.flip()
        #DIALOGUE:------
        dialogueManager()
        # print(screen_typing_q.size)
        #---------------
        pygame.display.update()
        clock.tick(60)
